import socket
import threading

class ThreadedServer(object):
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.sock.bind((self.host, self.port))

    def listen(self):
        self.sock.listen(5)
        while True:
            client, address = self.sock.accept()
            client.settimeout(60)
            threading.Thread(target = self.listenToClient,args = (client,address)).start()

    def listenToClient(self, client, address):
        size = 1024
        while True:
            data1, address = serverSocket.accept()
            data = data1.recv(2048).decode()
            #print(data)
            method, url, http_version, payload = parse(data)
            http_response = ""
            if method == "POST":
                http_response = http_version + " 200 OK\r\n\r\n"
                data1.send(http_response.encode('UTF-8'))

            elif method == "GET":
                try:
                    file = open(url, "r")
                except OSError:
                    found = 0

                if found:
                    http_response = http_version + " 200 OK\r\n"
                    file = file.read()
                    http_response = http_response + file + "\r\n"
                    data1.send(http_response.encode('UTF-8'))
                else:
                    http_response = http_version + " 404 Not Found\r\n"
                    data1.send(http_response.encode('UTF-8'))

if __name__ == "__main__":
    while True:
        port_num = input("Port? ")
        try:
            port_num = int(port_num)
            break
        except ValueError:
            pass

    ThreadedServer('',port_num).listen()